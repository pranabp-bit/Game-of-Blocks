#include <iostream>
#include<bits/stdc++.h>
using namespace std;
//defining a macro infinite
# define INF 0x3f3f3f3f  
//a class representing graph as an abstract data-type. Following is the graph implementation in the form of adjacency list
class graph{
  private:
    int E=0;//initially set number of edges as 0
    int V;
    vector <vector<pair<int, float> > > adj;
  public:
    graph(int V=0):V(V){for(int i=0;i<V;i++){adj.push_back({make_pair(i,0)});}}//initiate a vector in the vector of vectors adj for each vertex
   
    
//V (G): returns the number of vertices in the graph
    int no_of_V(){
        return V;
    }
//E (G): returns the number of edges in the graph    
    int no_of_E(){
        return E;
    }
//adjacent (G, x, y): tests whether there is an edge from node x to node y.    
    bool adjacent(int x, int y){
        for(auto temp : adj[x]){
            if(temp.first==y){
                return true;
            }
        }
        return false;
    }
// neighbors (G, x): lists all nodes y such that there is an edge from x to y.
    vector<int> neighbours(int x){
        vector<int> s;
        for(auto y:adj[x]){
            if(y.first!=x){
            s.push_back(y.first);
            }
        }
        return s;
    }
    
//add_edge (G, x, y): adds to G the edge from x to y, if it is not there.
void add_edge(int x,int y,float wt=0){
    int flag=0;
    for(auto i: adj[x]){
        if (i.first==y){
            flag=1;
            break;
        }
    }
        if(flag==0){
            E++;
            adj[x].push_back(make_pair(y, wt));
            adj[y].push_back(make_pair(x, wt));
            
        }    
}
//delete (G, x, y): removes the edge from x to y, if it is there.
void delete_edge(int x, int y){
        for(int i=0;i<V;i++){
            if (adj[x][i].first==y){
                E--;
                adj[x].erase(adj[x].begin()+i);
            }
        }
        for(int i=0;i<V;i++){
            if (adj[x][i].first==x){
                adj[y].erase(adj[y].begin()+i);
            }
        }        
}

//get_node_value (G, x): returns the value associated with the node x.
//set_node_value( G, x, a): sets the value associated with the node x to a.

//get_edge_value( G, x, y): returns the value associated to the edge (x,y).
float get_edge_value(int x, int y){
    for(auto s : adj[x]){
        if(s.first==y){
            return s.second;
        }
    }
    return 0;
}
//set_edge_value (G, x, y, v): sets the value associated to the edge (x,y) to v.
void set_edge_value (int x, int y, float v){
    for(int i=0;i<V;i++){
        if(adj[x][i].first==y){
            adj[x][i].second=v;
        }
    }
    for(int i=0;i<V;i++){
        if(adj[y][i].first==x){
            adj[y][i].second=v;
        }
    }    
}

};

//function to return a probability (a number between 0 and 1)
float prob(){
    float pro= (0.0 + static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(1.0))));
    return pro;
}

//function to return a random  number in a given distance range (1-10 in case of the assignment)
float random_distance(pair<float, float>dist_range={make_pair(1,10)}){
   float dist= (dist_range.first + static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(dist_range.second-dist_range.first))));
    return dist;
}

//function to add an edge between two vertices if randomly generated probability is is less than the edge_density.
//a randomly generated weight between a given range is also assigned to that edge. 
void graph_generator(graph& G, float edge_density, pair<float, float>dist_range={make_pair(1,10)}){
        int i,j;
        srand(time(0));
        for(i=0;i<G.no_of_V();i++){
            for(j=0;j<G.no_of_V();j++){
                if(i!=j){
                    if(prob()<edge_density){
                        G.add_edge(i,j,random_distance(dist_range));
                    }
                }
            }
        }
    }
    
//this class is the implementation of a priority queue whose only accessible element is the smallest element;    
class PriorityQueue{
    private:
        priority_queue < pair<float,int>, vector <pair<float,int>> , greater<pair<float,int>> > pq;
    public:
   
    //minPriority(PQ): removes the top element of the queue.
    void minPriority(){
        pq.pop();
    }
    
    //Insert(PQ, queue_element): insert queue_element into queue
    void insert(pair<float,int> queue_element){
        pq.push(queue_element);
    }
    
    //top(PQ):returns the top element of the queue.
    pair<float,int> top(){
        return pq.top();
    }
    
    //empty:checks whether the queue is empty.
    int empty(){
        if(pq.empty()){
            return 1;
        }
        else{
            return 0;
        }
    }
};
  
// actual implementation of Dijkstra's algorithm   
class shortestPath{
  private:
    graph G;
    int V;
    
  public:
    shortestPath(graph G, int V):G(G),V(V){}
    //member function to return length of shortest path
    float path_size(int u, int w){
        PriorityQueue pq;
        // Create a vector for distances of all points from u and initialize all distances as infinite (INF)
        vector<float> dist(V, INF); 
        pq.insert(make_pair(0, u)); // Insert source itself in priority queue and initialize its distance as 0. 
        dist[u] = 0;            
        while (!pq.empty()){        // Looping till priority queue becomes empty (or all distances are not finalized)
            
        /*The first vertex in pair is the minimum distance vertex, extract it from priority queue. 
         vertex label is stored in second of pair (it has to be done this way to keep the vertices 
         sorted distance (distance must be first item in pair)*/
         
        int a = pq.top().second; 
            pq.minPriority();
            for (auto x : G.neighbours(a)) //all agjacent vertices for a are found using class member function neighbours 
        { 
            float weight = G.get_edge_value(a, x); 
  
            // If there is shorted path to v through u. 
            if (dist[x] > dist[a] + weight) 
            { 
                // Updating distance of v 
                dist[x] = dist[a] + weight; 
                pq.insert(make_pair(dist[x], x)); 
            } 
        }
        }
        return dist[w];
    }
    
    //member function to return shortest path
    vector<int> path(int u,int w){ 
        //vector of vectors to maintain path from u to all other vertices
        vector<vector<int>> path(V);
        for(int i=0;i<9;i++){
        path[i].push_back(u);
        }
        //similar to the path_size funtion a priority queue is initialised
        PriorityQueue pq;
        vector<float> dist(V, INF);
        pq.insert(make_pair(0, u)); 
        dist[u] = 0;
        while (!pq.empty()){
            int a = pq.top().second; 
            pq.minPriority();
            for (auto x : G.neighbours(a)) 
        { 
            float weight = G.get_edge_value(a, x); 
  
            // If there is shorted path to v through u. 
            if (dist[x] > dist[a] + weight) 
            { 
                // Updating distance of v 
                dist[x] = dist[a] + weight;
                path[x].clear();
                path[x] = path[a];
                path[x].push_back(x); 
                pq.insert(make_pair(dist[x], x)); 
            } 
        }
        }
        return path[w];
    }
    
};
    

int main() {
    
    cout<<"GRAPH WITH EDGE DENSITY 20%"<<endl;
    //given number of vertices is 50.
    int No_of_vertices=50;
    
    //initialize a grapg G with given number of vertices
    graph G1(No_of_vertices);
    
    //given distance range is 1.0-10.0
    pair<float,float> dist_range (1.0,10.0);
    
    //for the first graph take the egde density as 20%
    float edge_density=0.2;
    
    //generate a random graph with the given edge density and distance range
    graph_generator(G1,edge_density,dist_range);
   
   //output the graph in adjacency list format with distances in bracket;
   cout<<"number of vertices- "<<G1.no_of_V()<<" "<<"number of edges- "<<G1.no_of_E()<<endl;
   
    for(int i=0;i<50;i++){
        cout<<i;
        for(auto x: G1.neighbours(i)){
            cout<<"->"<<x<<"("<<setprecision(3)<<G1.get_edge_value(x,i)<<")";
        }
        cout<<endl;
    }
    cout<<endl;
    
    //initialise class shortestPath with graph G1
     shortestPath s1(G1,No_of_vertices);
     int sum=0;
     //print the size of the shortest path of all vertices from vertex 0
     for(int i=0;i<No_of_vertices;i++){
         sum=sum+s1.path_size(0,i);
         cout<<"shortest path length from 0 to "<<i<<" is "<<s1.path_size(0,i)<<endl;
     }

     //print the shortest path of all vertices from vertex zero(to cross-check the path legth manually)
      for(int i=0;i<No_of_vertices;i++){
          cout<<"The shortest path between vertex 0 and vertex "<<i<<" is : ";
          for(auto x:s1.path(0,i)){
              cout<<x<<" ";
          }
          cout<<endl;
     }
     cout<<endl;
     cout<<"The average path length for the graph of edge density 20% is "<<sum/49<<"."<<endl<<endl;
     
     
     //now for density =40%
     cout<<"GRAPH WITH EDGE DENSITY 40%"<<endl;
    //initialize a grapg G2 with given number of vertices
    graph G2(No_of_vertices);

    //for the second graph take the egde density as 40%
    edge_density=0.4;
    
    //generate a random graph with the given edge density and distance range
    graph_generator(G2,edge_density,dist_range);
   
   //output the graph in adjacency list format with distances in bracket;
   cout<<"number of vertices- "<<G2.no_of_V()<<" "<<"number of edges- "<<G2.no_of_E()<<endl;
   
    for(int i=0;i<50;i++){
        cout<<i;
        for(auto x: G2.neighbours(i)){
            cout<<"->"<<x<<"("<<setprecision(3)<<G2.get_edge_value(x,i)<<")";
        }
        cout<<endl;
    }
    cout<<endl;
    
    //initialise class shortestPath with graph G2
     shortestPath s2(G2,No_of_vertices);
     sum=0;
     //print the size of the shortest path of all vertices from vertex 0
     for(int i=0;i<No_of_vertices;i++){
         sum=sum+s2.path_size(0,i);
         cout<<"shortest path length from 0 to "<<i<<" is "<<s2.path_size(0,i)<<endl;
     }

     //print the shortest path of all vertices from vertex zero(to cross-check the path legth manually)
      for(int i=0;i<No_of_vertices;i++){
          cout<<"The shortest path between vertex 0 and vertex "<<i<<" is : ";
          for(auto x:s2.path(0,i)){
              cout<<x<<" ";
          }
          cout<<endl;
     }
     
     cout<<endl;
     cout<<"The average path length for the graph of edge density 40% is "<<sum/49<<".";

	return 0;
}


//Output of the above program (varying)
/*GRAPH WITH EDGE DENSITY 20%
number of vertices- 50 number of edges- 426
0->2(1.85)->5(7.14)->11(8.49)->32(8.41)->36(3.78)->44(5.58)->1(8.74)->4(2.96)->6(9.57)->8(9.72)->9(4.23)->13(5.82)->18(5.2)->19(2.72)->20(7.36)->28(2.85)->34(2.92)
1->0(8.74)->5(6.8)->17(5.13)->20(1.19)->25(2.63)->27(1.37)->29(5.68)->36(6.28)->37(1.49)->38(1.01)->40(5.14)->47(2.85)->13(9.5)->14(5.18)->15(9.32)->18(5.56)->19(9.11)->26(2.7)->43(3.19)
2->0(1.85)->21(7.19)->22(6.98)->23(1.15)->36(2.82)->45(6.82)->47(4.01)->4(7.35)->5(8.88)->10(8.64)->12(6.11)->15(5.06)->17(9.44)->28(5.63)->30(1.78)->31(9.31)->37(1.1)->43(4.25)
3->13(2.59)->18(6.01)->32(9.6)->34(3.06)->35(9.3)->37(4.1)->41(9.5)->45(8.72)->4(3.32)->17(8.03)->20(7.16)->23(6.16)->24(3.12)->26(10)->42(3.93)
4->0(2.96)->2(7.35)->3(3.32)->6(9.74)->9(8.95)->11(3.05)->14(5.57)->22(1.96)->24(3.92)->25(3.13)->26(2.05)->29(5.19)->34(7.79)->38(2.39)->43(5.76)->47(4.64)->49(6.77)->12(4.56)->16(7.23)->32(8.63)->44(7.85)->45(7.15)->48(6)
5->0(7.14)->1(6.8)->2(8.88)->8(5.09)->9(9.26)->12(5.53)->15(7.5)->19(5.33)->47(2.8)->10(4.19)->11(8.91)->16(9.33)->21(5.44)->30(2.22)->37(3.3)->39(7.7)->42(2.14)->46(7.21)
6->4(9.74)->0(9.57)->17(7.58)->24(9.66)->25(7.9)->27(7.47)->28(2.11)->29(2.69)->39(5.75)->40(2.55)->43(2.95)->46(8.29)->14(6.29)->34(7.18)->35(2.19)->37(2.9)->41(9.93)
7->9(7)->13(1.45)->15(6.2)->19(4.58)->20(9.33)->22(7.62)->23(4.66)->28(4.34)->32(6)->35(7.14)->41(4.49)->10(2.55)->18(7.17)->26(4.46)->29(9.38)->39(7.95)->43(8.58)
8->5(5.09)->0(9.72)->9(6.2)->10(6.72)->12(3.86)->14(2.36)->15(9.54)->28(4.14)->29(7.61)->34(3.72)->39(6.27)->41(5.81)->42(5.87)->11(8.07)->27(1.28)->37(1.5)
9->4(8.95)->5(9.26)->7(7)->8(6.2)->0(4.23)->10(6.33)->11(7.96)->12(7.12)->16(2.64)->22(8.63)->25(2.53)->31(7.14)->33(8.35)->35(6.31)->39(3.13)->41(6.75)->42(8.61)->19(4.93)->21(8.19)->24(4.22)->27(7.48)->29(1.13)
10->8(6.72)->9(6.33)->2(8.64)->5(4.19)->7(2.55)->13(3.12)->17(9.57)->38(6.98)->44(5.12)->45(1.04)->23(9.66)->26(2.84)->32(3)->35(1.41)->36(5.37)->37(1.01)->40(7.86)->47(2.54)
11->0(8.49)->4(3.05)->9(7.96)->5(8.91)->8(8.07)->23(2.97)->26(6.38)->29(8.45)->31(9.02)->37(9.54)->41(4.06)->44(8.85)->25(9.2)->39(3.22)->42(1.79)
12->5(5.53)->8(3.86)->9(7.12)->2(6.11)->4(4.56)->16(2.63)->17(1.66)->22(9.31)->24(7.02)->34(6.64)->36(3.18)->39(6.62)->41(6.86)->47(8.26)->49(5.28)->15(3.13)->26(3.05)->42(6.5)->43(8.84)
13->3(2.59)->7(1.45)->10(3.12)->0(5.82)->1(9.5)->15(8.28)->21(8.54)->32(3.9)->37(4.11)->47(4.25)->48(9.48)->49(1.05)->26(1.8)
14->4(5.57)->8(2.36)->1(5.18)->6(6.29)->17(3.72)->32(8.97)->35(5.95)->43(7.28)->44(4.06)->31(1.78)->34(7.85)->36(2.6)->41(2.21)->42(2.86)
15->5(7.5)->7(6.2)->8(9.54)->13(8.28)->1(9.32)->2(5.06)->12(3.13)->18(7.07)->23(3.77)->40(4.62)->42(9.06)->45(9.28)->49(2.15)->31(1.11)->34(7.16)->41(4.37)
16->9(2.64)->12(2.63)->4(7.23)->5(9.33)->17(1.59)->21(1.37)->24(8.67)->26(8.02)->28(3.78)->35(2.89)->36(3.98)->29(3.92)->31(5.69)->33(2.87)->40(1.52)
17->1(5.13)->6(7.58)->10(9.57)->12(1.66)->14(3.72)->16(1.59)->2(9.44)->3(8.03)->19(1.84)->38(4.43)->42(3.58)->44(6.58)->48(6.94)->21(4.26)->23(8.92)->27(7.71)->28(3.69)->32(3.94)->37(8.42)->47(5.71)->49(8.34)
18->3(6.01)->15(7.07)->0(5.2)->1(5.56)->7(7.17)->22(2.25)->34(2.86)->49(4.42)->39(1.71)->47(2.75)->48(1.88)
19->5(5.33)->7(4.58)->17(1.84)->0(2.72)->1(9.11)->9(4.93)->22(7.58)->38(6.42)->40(1.07)->44(3.01)->45(6.98)->24(5.63)->25(1.61)->27(3.17)->28(2.58)->34(7.6)->35(3.56)->48(7.18)
20->1(1.19)->7(9.33)->0(7.36)->3(7.16)->23(9.47)->33(4.7)->34(6.02)->37(1.56)->45(5.43)->46(8.79)->24(5.28)->27(1.14)->36(9.72)->42(5.99)->44(5.93)
21->2(7.19)->13(8.54)->16(1.37)->5(5.44)->9(8.19)->17(4.26)->27(2.7)->34(8.27)->49(2.03)->23(8.15)->26(3.94)->31(1.29)->36(9.77)->38(5.07)->45(3.86)->46(2.65)
22->2(6.98)->4(1.96)->7(7.62)->9(8.63)->12(9.31)->18(2.25)->19(7.58)->24(6.63)->27(5.48)->30(3.55)->44(5.44)->47(2.56)->23(2.45)->28(3.88)->42(9.36)->45(2.13)->49(7.77)
23->2(1.15)->7(4.66)->11(2.97)->15(3.77)->20(9.47)->3(6.16)->10(9.66)->17(8.92)->21(8.15)->22(2.45)->25(7.83)->30(2.08)->32(7.24)->40(4.82)->41(2.09)->45(6.62)->31(2.07)->33(1.76)->44(8.27)
24->4(3.92)->6(9.66)->12(7.02)->16(8.67)->22(6.63)->3(3.12)->9(4.22)->19(5.63)->20(5.28)->25(6.32)->28(4.54)->31(8.04)->33(2.24)->38(4.12)->37(9.05)->41(7.17)->45(7.53)
25->1(2.63)->4(3.13)->6(7.9)->9(2.53)->23(7.83)->24(6.32)->11(9.2)->19(1.61)->38(5.94)->40(5.13)->42(7.6)->45(9.99)->35(6.43)->46(6.4)
26->4(2.05)->11(6.38)->16(8.02)->1(2.7)->3(10)->7(4.46)->10(2.84)->12(3.05)->13(1.8)->21(3.94)->30(2.78)->35(6.48)->38(1.38)->41(7.43)->48(2.67)->28(5.86)->31(2.12)->44(2.32)->45(5.55)
27->1(1.37)->6(7.47)->21(2.7)->22(5.48)->8(1.28)->9(7.48)->17(7.71)->19(3.17)->20(1.14)->28(3.89)->36(7.36)->37(6.75)->43(8.89)->29(1.1)->30(10)->32(2.73)->38(8.37)->40(2.72)->42(5.53)->47(8.77)
28->6(2.11)->7(4.34)->8(4.14)->16(3.78)->24(4.54)->27(3.89)->0(2.85)->2(5.63)->17(3.69)->19(2.58)->22(3.88)->26(5.86)->34(9.51)->40(1.11)->43(1.65)->33(1.53)->36(6.65)->39(2.65)->41(1.01)->45(2.7)->47(9.64)
29->1(5.68)->4(5.19)->6(2.69)->8(7.61)->11(8.45)->7(9.38)->9(1.13)->16(3.92)->27(1.1)->32(8.1)->40(1.46)->48(3.72)->30(9.01)->33(9.95)->35(5.02)->36(6.56)->38(8.11)->43(1.42)
30->22(3.55)->23(2.08)->26(2.78)->2(1.78)->5(2.22)->27(10)->29(9.01)->33(6.3)->34(3.17)->41(1.65)->46(2.96)->49(1.78)->32(8.98)->43(6.16)->44(7.58)
31->9(7.14)->11(9.02)->24(8.04)->2(9.31)->14(1.78)->15(1.11)->16(5.69)->21(1.29)->23(2.07)->26(2.12)->48(5.38)->37(8.4)->38(6.4)->42(3.29)->49(9.01)
32->0(8.41)->3(9.6)->7(6)->13(3.9)->14(8.97)->23(7.24)->29(8.1)->4(8.63)->10(3)->17(3.94)->27(2.73)->30(8.98)->35(4.86)->37(9.18)->45(2.67)->46(3.28)->47(2.76)
33->9(8.35)->20(4.7)->24(2.24)->30(6.3)->16(2.87)->23(1.76)->28(1.53)->29(9.95)->35(3.67)->38(7.86)->49(4.33)->37(6.79)->45(6.19)
34->3(3.06)->4(7.79)->8(3.72)->12(6.64)->18(2.86)->20(6.02)->21(8.27)->28(9.51)->30(3.17)->0(2.92)->6(7.18)->14(7.85)->15(7.16)->19(7.6)->45(9.68)->49(2.95)->41(2.22)
35->3(9.3)->7(7.14)->9(6.31)->14(5.95)->16(2.89)->26(6.48)->32(4.86)->33(3.67)->6(2.19)->10(1.41)->19(3.56)->25(6.43)->29(5.02)->41(5.18)->45(5.69)->36(8.6)->37(2.94)->48(3.86)->49(7.32)
36->0(3.78)->1(6.28)->2(2.82)->12(3.18)->16(3.98)->27(7.36)->10(5.37)->14(2.6)->20(9.72)->21(9.77)->28(6.65)->29(6.56)->35(8.6)->42(1.68)->43(9.27)->45(8.99)->47(2.87)->44(7.58)
37->1(1.49)->3(4.1)->11(9.54)->13(4.11)->20(1.56)->27(6.75)->32(9.18)->2(1.1)->5(3.3)->6(2.9)->8(1.5)->10(1.01)->17(8.42)->24(9.05)->31(8.4)->33(6.79)->35(2.94)->38(8.76)->40(2.02)->43(2.97)->46(8.9)->48(7.94)->49(5.33)->42(3.63)
38->1(1.01)->4(2.39)->10(6.98)->17(4.43)->19(6.42)->24(4.12)->25(5.94)->26(1.38)->33(7.86)->37(8.76)->21(5.07)->27(8.37)->29(8.11)->31(6.4)->41(6.34)->43(5.27)->49(8.85)
39->6(5.75)->8(6.27)->9(3.13)->12(6.62)->5(7.7)->7(7.95)->11(3.22)->18(1.71)->28(2.65)->49(1.48)
40->1(5.14)->6(2.55)->15(4.62)->19(1.07)->23(4.82)->25(5.13)->28(1.11)->29(1.46)->37(2.02)->10(7.86)->16(1.52)->27(2.72)->42(8.21)->46(3.53)->47(6.85)
41->3(9.5)->7(4.49)->8(5.81)->9(6.75)->11(4.06)->12(6.86)->23(2.09)->26(7.43)->30(1.65)->35(5.18)->38(6.34)->6(9.93)->14(2.21)->15(4.37)->24(7.17)->28(1.01)->34(2.22)->44(5.21)->47(5.36)->48(2.7)->49(8.82)
42->8(5.87)->9(8.61)->15(9.06)->17(3.58)->25(7.6)->36(1.68)->40(8.21)->3(3.93)->5(2.14)->11(1.79)->12(6.5)->14(2.86)->20(5.99)->22(9.36)->27(5.53)->31(3.29)->37(3.63)->44(9.85)
43->4(5.76)->6(2.95)->14(7.28)->27(8.89)->28(1.65)->36(9.27)->37(2.97)->38(5.27)->1(3.19)->2(4.25)->7(8.58)->12(8.84)->29(1.42)->30(6.16)->47(4.23)->44(5.65)->46(5.18)->49(4.03)
44->0(5.58)->10(5.12)->11(8.85)->14(4.06)->17(6.58)->19(3.01)->22(5.44)->41(5.21)->42(9.85)->4(7.85)->20(5.93)->23(8.27)->26(2.32)->30(7.58)->36(7.58)->43(5.65)->47(2.06)->49(9.33)
45->2(6.82)->3(8.72)->10(1.04)->15(9.28)->19(6.98)->20(5.43)->23(6.62)->25(9.99)->32(2.67)->34(9.68)->35(5.69)->36(8.99)->4(7.15)->21(3.86)->22(2.13)->24(7.53)->26(5.55)->28(2.7)->33(6.19)
46->6(8.29)->20(8.79)->30(2.96)->32(3.28)->37(8.9)->40(3.53)->5(7.21)->21(2.65)->25(6.4)->43(5.18)->48(4.57)
47->1(2.85)->2(4.01)->4(4.64)->5(2.8)->12(8.26)->13(4.25)->22(2.56)->32(2.76)->36(2.87)->43(4.23)->44(2.06)->10(2.54)->17(5.71)->18(2.75)->27(8.77)->28(9.64)->40(6.85)->41(5.36)
48->13(9.48)->17(6.94)->26(2.67)->29(3.72)->31(5.38)->37(7.94)->46(4.57)->4(6)->18(1.88)->19(7.18)->35(3.86)->41(2.7)
49->4(6.77)->12(5.28)->13(1.05)->15(2.15)->18(4.42)->21(2.03)->30(1.78)->33(4.33)->34(2.95)->37(5.33)->38(8.85)->44(9.33)->17(8.34)->22(7.77)->31(9.01)->35(7.32)->39(1.48)->41(8.82)->43(4.03)
shortest path length from 0 to 0 is 0
shortest path length from 0 to 1 is 4.44
shortest path length from 0 to 2 is 1.85
shortest path length from 0 to 3 is 5.97
shortest path length from 0 to 4 is 2.96
shortest path length from 0 to 5 is 5.86
shortest path length from 0 to 6 is 4.96
shortest path length from 0 to 7 is 6.51
shortest path length from 0 to 8 is 4.45
shortest path length from 0 to 9 is 4.23
shortest path length from 0 to 10 is 3.96
shortest path length from 0 to 11 is 5.97
shortest path length from 0 to 12 is 6.22
shortest path length from 0 to 13 is 5.82
shortest path length from 0 to 14 is 6.07
shortest path length from 0 to 15 is 6.19
shortest path length from 0 to 16 is 5.31
shortest path length from 0 to 17 is 4.56
shortest path length from 0 to 18 is 5.2
shortest path length from 0 to 19 is 2.72
shortest path length from 0 to 20 is 4.51
shortest path length from 0 to 21 is 6.37
shortest path length from 0 to 22 is 4.92
shortest path length from 0 to 23 is 3
shortest path length from 0 to 24 is 6.62
shortest path length from 0 to 25 is 4.33
shortest path length from 0 to 26 is 5.01
shortest path length from 0 to 27 is 5.66
shortest path length from 0 to 28 is 2.85
shortest path length from 0 to 29 is 5.25
shortest path length from 0 to 30 is 3.64
shortest path length from 0 to 31 is 5.08
shortest path length from 0 to 32 is 6.96
shortest path length from 0 to 33 is 4.38
shortest path length from 0 to 34 is 2.92
shortest path length from 0 to 35 is 5.37
shortest path length from 0 to 36 is 3.78
shortest path length from 0 to 37 is 2.95
shortest path length from 0 to 38 is 5.35
shortest path length from 0 to 39 is 5.5
shortest path length from 0 to 40 is 3.79
shortest path length from 0 to 41 is 3.86
shortest path length from 0 to 42 is 5.47
shortest path length from 0 to 43 is 4.5
shortest path length from 0 to 44 is 5.58
shortest path length from 0 to 45 is 5
shortest path length from 0 to 46 is 6.6
shortest path length from 0 to 47 is 5.86
shortest path length from 0 to 48 is 6.56
shortest path length from 0 to 49 is 5.42
The shortest path between vertex 0 and vertex 0 is : 0 
The shortest path between vertex 0 and vertex 1 is : 0 2 37 1 
The shortest path between vertex 0 and vertex 2 is : 0 2 
The shortest path between vertex 0 and vertex 3 is : 0 34 3 
The shortest path between vertex 0 and vertex 4 is : 0 4 
The shortest path between vertex 0 and vertex 5 is : 0 2 30 5 
The shortest path between vertex 0 and vertex 6 is : 0 28 6 
The shortest path between vertex 0 and vertex 7 is : 0 2 37 10 7 
The shortest path between vertex 0 and vertex 8 is : 0 2 37 8 
The shortest path between vertex 0 and vertex 9 is : 0 9 
The shortest path between vertex 0 and vertex 10 is : 0 2 37 10 
The shortest path between vertex 0 and vertex 11 is : 0 2 23 11 
The shortest path between vertex 0 and vertex 12 is : 0 19 17 12 
The shortest path between vertex 0 and vertex 13 is : 0 13 
The shortest path between vertex 0 and vertex 14 is : 0 28 41 14 
The shortest path between vertex 0 and vertex 15 is : 0 2 23 31 15 
The shortest path between vertex 0 and vertex 16 is : 0 19 40 16 
The shortest path between vertex 0 and vertex 17 is : 0 19 17 
The shortest path between vertex 0 and vertex 18 is : 0 18 
The shortest path between vertex 0 and vertex 19 is : 0 19 
The shortest path between vertex 0 and vertex 20 is : 0 2 37 20 
The shortest path between vertex 0 and vertex 21 is : 0 2 23 31 21 
The shortest path between vertex 0 and vertex 22 is : 0 4 22 
The shortest path between vertex 0 and vertex 23 is : 0 2 23 
The shortest path between vertex 0 and vertex 24 is : 0 28 33 24 
The shortest path between vertex 0 and vertex 25 is : 0 19 25 
The shortest path between vertex 0 and vertex 26 is : 0 4 26 
The shortest path between vertex 0 and vertex 27 is : 0 2 37 20 27 
The shortest path between vertex 0 and vertex 28 is : 0 28 
The shortest path between vertex 0 and vertex 29 is : 0 19 40 29 
The shortest path between vertex 0 and vertex 30 is : 0 2 30 
The shortest path between vertex 0 and vertex 31 is : 0 2 23 31 
The shortest path between vertex 0 and vertex 32 is : 0 2 37 10 32 
The shortest path between vertex 0 and vertex 33 is : 0 28 33 
The shortest path between vertex 0 and vertex 34 is : 0 34 
The shortest path between vertex 0 and vertex 35 is : 0 2 37 10 35 
The shortest path between vertex 0 and vertex 36 is : 0 36 
The shortest path between vertex 0 and vertex 37 is : 0 2 37 
The shortest path between vertex 0 and vertex 38 is : 0 4 38 
The shortest path between vertex 0 and vertex 39 is : 0 28 39 
The shortest path between vertex 0 and vertex 40 is : 0 19 40 
The shortest path between vertex 0 and vertex 41 is : 0 28 41 
The shortest path between vertex 0 and vertex 42 is : 0 36 42 
The shortest path between vertex 0 and vertex 43 is : 0 28 43 
The shortest path between vertex 0 and vertex 44 is : 0 44 
The shortest path between vertex 0 and vertex 45 is : 0 2 37 10 45 
The shortest path between vertex 0 and vertex 46 is : 0 2 30 46 
The shortest path between vertex 0 and vertex 47 is : 0 2 47 
The shortest path between vertex 0 and vertex 48 is : 0 28 41 48 
The shortest path between vertex 0 and vertex 49 is : 0 2 30 49 
The average path length for the graph of edge density 20% is 4.
GRAPH WITH EDGE DENSITY 40%
number of vertices- 50 number of edges- 778
0->2(1.85)->4(2.44)->7(5.98)->8(4.04)->9(8.49)->11(8.38)->14(5.46)->20(9.14)->24(6.53)->26(8.41)->30(3.78)->35(7.1)->37(5.58)->42(1.49)->47(6.8)->3(9.6)->10(8.45)->13(5.06)->17(3.75)->18(3.96)->19(7.04)->25(8.47)->27(6.01)->29(7.18)->33(8.22)->38(7.58)->40(5.66)->48(8.72)
1->4(7.2)->9(5.13)->11(2.22)->12(5.81)->15(2.28)->16(5.31)->17(1.37)->19(5.68)->22(6.75)->23(3.82)->24(6.28)->25(1.49)->26(1.01)->28(5.14)->29(5.17)->31(9.98)->32(2.53)->33(4.44)->34(7.16)->36(6.87)->41(3.59)->44(4.12)->49(5.99)->2(6.98)->6(6.17)->10(1.67)->14(4.92)->20(8.15)->21(1.85)->30(3.87)->40(2.8)->43(9.74)->45(2.6)->46(5.33)
2->0(1.85)->1(6.98)->3(1.15)->5(3)->6(6.44)->13(2.26)->14(5.44)->18(4.75)->19(7.26)->20(6.82)->21(1.86)->22(3.41)->25(6.98)->29(4.72)->31(9.74)->33(2.59)->35(7.04)->37(6.01)->49(2.85)->4(6.68)->7(6.2)->8(1.13)->12(4.25)->16(2.86)->17(6.98)->27(7.64)->30(3.56)->36(3.08)->39(6.92)->40(4.07)->45(9.86)->46(1.06)->47(7.44)
3->2(1.15)->0(9.6)->4(9.3)->6(4.1)->8(9.15)->9(9.5)->10(3.26)->12(8.72)->13(5.3)->16(2.96)->18(7.35)->19(3.32)->21(9.74)->23(1.87)->26(3.05)->29(5.57)->36(1.48)->37(3.08)->38(3.92)->39(3.13)->40(2.05)->43(5.19)->48(7.79)->7(6.72)->14(1.42)->24(3.19)->25(6.08)->28(5.76)->30(5.91)->32(6.79)->33(6.34)->41(2.27)->44(7.59)->49(5.59)
4->0(2.44)->1(7.2)->3(9.3)->2(6.68)->7(5.76)->9(6.72)->10(4.64)->12(6.77)->14(2.22)->16(6.41)->19(5.09)->20(9.26)->23(5.53)->26(7.5)->27(3.36)->28(2.41)->31(8.97)->33(5.74)->39(4.9)->44(3.7)->48(3.26)->18(2.82)->21(2.24)->22(7.6)->25(4.5)->29(9.73)->34(7.66)->35(5.79)->38(8.13)->41(3.66)->42(2.38)->46(9.99)->47(7.61)->49(2.17)
5->2(3)->6(9.57)->9(1.49)->20(7.77)->21(7.58)->22(9.12)->27(9.66)->28(7.9)->30(7.47)->31(2.11)->32(2.69)->36(6.97)->38(2.93)->39(1.67)->41(2.55)->42(3.5)->43(2.95)->46(8.29)->48(6.19)->7(3.86)->12(1.82)->13(5.39)->14(1.28)->16(7.66)->19(6.31)->24(1.42)->33(5.27)->35(2.21)->37(1.42)->40(4.48)->44(4.12)
6->2(6.44)->3(4.1)->5(9.57)->1(6.17)->10(1.45)->12(6.2)->14(8.54)->15(4.58)->16(9.33)->17(2.6)->19(4.66)->20(5.97)->23(4.34)->27(6)->30(7.14)->36(4.49)->45(9.72)->8(9.53)->11(1.51)->13(3.34)->21(5.19)->22(9.99)->26(3.17)->31(9.94)->33(4.86)->35(4.37)->37(6.16)->39(7.68)->41(1.55)->42(9.93)
7->0(5.98)->4(5.76)->2(6.2)->3(6.72)->5(3.86)->8(2.36)->9(9.54)->10(4.68)->21(4.14)->22(7.61)->25(6.43)->26(3.72)->27(6.74)->30(6.27)->32(5.81)->33(5.87)->36(4.13)->40(4.23)->41(3.83)->44(3.54)->46(8.97)->47(6.33)->48(7.96)->49(7.12)->13(3.13)->14(2.43)->15(7.81)->16(3.51)->18(5.44)->19(2.98)->20(2.71)->23(4.78)->24(6.13)->29(7.85)->31(8.6)->34(4.84)->35(9.23)->43(6.09)->45(7.87)
8->0(4.04)->3(9.15)->7(2.36)->2(1.13)->6(9.53)->11(2.53)->12(4.23)->16(7.14)->18(8.35)->19(2.53)->21(8.65)->23(3.13)->25(6.75)->26(8.61)->36(8.64)->39(4.19)->40(1.5)->41(6.14)->42(7.86)->44(3.12)->46(7.5)->47(9.57)->20(2.9)->22(9.67)->29(7.16)->43(1.46)->45(1.71)->48(8.16)
9->0(8.49)->1(5.13)->3(9.5)->4(6.72)->5(1.49)->7(9.54)->11(2.91)->12(4.46)->17(6.98)->23(5.12)->24(1.04)->25(9.77)->31(9.67)->32(8.91)->35(8.07)->38(3.36)->39(3.86)->42(7)->44(7.47)->45(2.97)->47(2.74)->49(9.83)->10(1.25)->15(8.88)->18(9.13)->20(7.24)->22(5.72)->27(7.14)->28(3.78)->33(8.85)->34(6.48)->37(7.96)->41(7.18)
10->3(3.26)->4(4.64)->6(1.45)->7(4.68)->0(8.45)->1(1.67)->9(1.25)->11(3.17)->12(1.06)->19(9.45)->20(6.11)->22(4.56)->23(3.1)->24(4.97)->28(7.9)->30(2.63)->31(1.66)->33(4.57)->35(9.31)->36(1.92)->39(6.47)->44(7.93)->45(6.64)->46(1.3)->47(9.49)->48(1.08)->14(3.78)->15(3.29)->17(7.16)->18(8.19)->25(1.1)->26(4.92)->34(7.86)->40(2.54)->42(6.73)->49(2.45)
11->0(8.38)->1(2.22)->8(2.53)->9(2.91)->10(3.17)->6(1.51)->12(9.5)->17(9.96)->20(7.21)->22(7.29)->23(8.28)->26(6.39)->28(8.54)->31(9.5)->38(3.9)->41(3.06)->42(4.11)->15(9.35)->16(8.92)->21(7.21)->25(7.32)->37(4.01)->40(8.34)->44(8.21)->49(5.66)
12->1(5.81)->3(8.72)->4(6.77)->6(6.2)->8(4.23)->9(4.46)->10(1.06)->11(9.5)->2(4.25)->5(1.82)->13(7.24)->17(5.13)->20(3.72)->24(7.19)->25(4.68)->33(8.97)->36(5.95)->44(7.28)->45(4.06)->46(6.47)->47(6.64)->48(6.14)->49(9.32)->19(6.63)->21(3.3)->23(7.56)->26(3.29)->27(8.63)->29(7.6)->30(6.21)->32(2.97)->34(5.6)->35(5.31)->38(5.65)->42(9.46)
13->2(2.26)->3(5.3)->12(7.24)->0(5.06)->5(5.39)->6(3.34)->7(3.13)->18(3.77)->19(7.88)->25(4.17)->26(6.23)->30(3.55)->31(4.62)->33(9.06)->34(6.51)->35(9.28)->36(9.91)->38(2.15)->40(9.02)->42(7.23)->43(9.33)->46(5.72)->47(3.37)->48(6.85)->14(8.19)->15(4.43)->16(4.42)->17(3.21)->21(4.91)->22(5.96)->24(1.3)->41(8.01)->45(1.76)
14->0(5.46)->2(5.44)->4(2.22)->6(8.54)->1(4.92)->3(1.42)->5(1.28)->7(2.43)->10(3.78)->13(8.19)->17(2.89)->18(3.98)->25(7.37)->26(4.54)->31(1.35)->33(8.03)->46(4)->48(1.84)->15(6.96)->16(2.72)->19(5.48)->24(8.45)->27(3.49)->29(7.55)->34(1.52)->35(6.86)->36(3.29)->38(2.06)->40(4.77)->42(7.32)->43(4.42)
15->1(2.28)->6(4.58)->7(7.81)->9(8.88)->10(3.29)->11(9.35)->13(4.43)->14(6.96)->17(3.58)->19(6.58)->21(7.43)->22(6.94)->24(5.2)->25(5.56)->27(3.37)->30(7.17)->37(2.81)->39(5.4)->42(2.25)->45(4.66)->46(4.5)->16(9.11)->26(2.96)->32(8.9)->33(7.7)->40(5.71)->41(2.66)->43(1.25)->48(3.38)->49(7)
16->1(5.31)->3(2.96)->4(6.41)->6(9.33)->8(7.14)->2(2.86)->5(7.66)->7(3.51)->11(8.92)->13(4.42)->14(2.72)->15(9.11)->19(8.91)->23(4.93)->27(3.68)->28(9.74)->31(3.73)->32(7.58)->37(8.02)->44(4.63)->46(6.42)->48(1.07)->21(5.17)->33(1.46)->35(1.01)->38(9.33)->40(2.75)->41(8.12)->43(1.55)->47(1.85)
17->1(1.37)->6(2.6)->9(6.98)->11(9.96)->12(5.13)->14(2.89)->15(3.58)->0(3.75)->2(6.98)->10(7.16)->13(3.21)->28(9.47)->31(3.6)->36(1.39)->38(6.02)->40(1.63)->41(9.54)->47(1.3)->49(8.79)->19(9.45)->20(4.82)->25(7.61)->27(3)->34(5.08)->39(2.87)->42(1.48)->44(6.1)
18->2(4.75)->3(7.35)->8(8.35)->13(3.77)->14(3.98)->0(3.96)->4(2.82)->7(5.44)->9(9.13)->10(8.19)->19(4.26)->21(4.56)->24(3.47)->26(2.7)->28(4.52)->32(8.27)->38(5.5)->39(8.5)->40(9.99)->44(2.03)->45(6.82)->46(6.3)->20(2.09)->22(2.84)->23(7.71)->31(2.87)->35(8.69)->41(5.81)->43(2.66)->48(3.98)
19->1(5.68)->2(7.26)->3(3.32)->4(5.09)->6(4.66)->8(2.53)->10(9.45)->13(7.88)->15(6.58)->16(8.91)->18(4.26)->0(7.04)->5(6.31)->7(2.98)->12(6.63)->14(5.48)->17(9.45)->23(8.97)->27(3.29)->28(1.02)->31(2.16)->32(9.21)->34(5.84)->36(6.16)->41(8.75)->42(9.66)->45(5.16)->47(1.96)->20(6.33)->22(6.18)->25(1.46)->29(5.21)->30(5.18)->33(3.88)->38(8.02)->40(4.67)->44(2.04)->46(5.5)->49(2.5)
20->0(9.14)->2(6.82)->4(9.26)->5(7.77)->6(5.97)->10(6.11)->11(7.21)->12(3.72)->1(8.15)->7(2.71)->8(2.9)->9(7.24)->17(4.82)->18(2.09)->19(6.33)->22(6.62)->23(4.19)->25(4.91)->28(3.12)->30(4.2)->32(1.44)->33(3.96)->40(6.3)->41(5.63)->42(5.28)->46(6.32)->49(4.54)->26(1.93)->27(5.08)->36(3.63)->37(4.23)->39(9.42)
21->2(1.86)->3(9.74)->5(7.58)->7(4.14)->8(8.65)->15(7.43)->18(4.56)->1(1.85)->4(2.24)->6(5.19)->11(7.21)->12(3.3)->13(4.91)->16(5.17)->25(9.14)->27(9.2)->30(4.4)->34(1.61)->37(2.98)->47(8.15)->49(2.19)->22(1.8)->23(1.14)->29(3.1)->32(8.89)->35(2.69)->38(7.15)->41(3.86)->42(4.03)->48(4.3)
22->1(6.75)->2(3.41)->5(9.12)->7(7.61)->10(4.56)->11(7.29)->15(6.94)->20(6.62)->4(7.6)->6(9.99)->8(9.67)->9(5.72)->13(5.96)->18(2.84)->19(6.18)->21(1.8)->23(7.92)->24(8.48)->26(4.71)->27(3.94)->35(2.78)->37(6.23)->39(6.48)->41(2.67)->42(5.07)->43(2.18)->28(1.76)->30(5.69)->34(9.46)->36(8.46)->45(4.57)->46(9.2)
23->1(3.82)->3(1.87)->4(5.53)->6(4.34)->8(3.13)->9(5.12)->10(3.1)->11(8.28)->16(4.93)->19(8.97)->20(4.19)->22(7.92)->7(4.78)->12(7.56)->18(7.71)->21(1.14)->24(3.57)->28(2.79)->29(7.56)->36(7.36)->37(6.75)->43(8.89)->45(9.03)->49(2.85)->26(8.32)->31(1.1)->40(8.77)->41(5.13)->42(5.66)->46(5.67)->48(5.12)
24->0(6.53)->1(6.28)->9(1.04)->10(4.97)->12(7.19)->15(5.2)->18(3.47)->22(8.48)->23(3.57)->3(3.19)->5(1.42)->7(6.13)->13(1.3)->14(8.45)->26(8.59)->29(9.51)->31(5.64)->33(2.62)->34(7.95)->36(1.65)->37(3.1)->38(9.15)->40(3.02)->42(6.63)->45(5.22)->46(9.38)->47(2.18)->48(3.84)->27(3.94)->28(7.05)->30(8.23)->39(5.19)->43(6.34)->44(8.38)
25->1(1.49)->2(6.98)->7(6.43)->8(6.75)->9(9.77)->12(4.68)->13(4.17)->14(7.37)->15(5.56)->20(4.91)->21(9.14)->0(8.47)->3(6.08)->4(4.5)->10(1.1)->11(7.32)->17(7.61)->19(1.46)->27(2.29)->28(3.96)->31(1.78)->33(1.88)->34(9.62)->36(7.72)->37(4.83)->41(8.7)->43(6.97)->44(8.62)->46(7.84)->48(1.55)->49(1.15)->35(6.36)->39(8.83)->47(2.83)
26->0(8.41)->1(1.01)->3(3.05)->4(7.5)->7(3.72)->8(8.61)->11(6.39)->13(6.23)->14(4.54)->18(2.7)->22(4.71)->24(8.59)->6(3.17)->10(4.92)->12(3.29)->15(2.96)->20(1.93)->23(8.32)->29(2.87)->32(1.78)->33(1.11)->34(5.69)->35(9.05)->36(4.32)->37(1.29)->38(2.76)->39(2.38)->41(1.68)->42(4.86)->47(4.3)->28(1.53)->30(1.78)->31(3.3)->40(4.11)
27->4(3.36)->5(9.66)->6(6)->7(6.74)->15(3.37)->16(3.68)->19(3.29)->21(9.2)->22(3.94)->25(2.29)->0(6.01)->2(7.64)->9(7.14)->12(8.63)->14(3.49)->17(3)->20(5.08)->24(3.94)->29(9.06)->30(4.41)->31(6.09)->33(2.73)->34(2.99)->35(8.98)->37(4.43)->38(4.86)->40(9.18)->44(6.04)->47(2.67)->48(3.28)->49(2.76)->28(9.95)->39(2.65)
28->1(5.14)->4(2.41)->5(7.9)->10(7.9)->11(8.54)->16(9.74)->17(9.47)->18(4.52)->19(1.02)->20(3.12)->23(2.79)->25(3.96)->3(5.76)->9(3.78)->22(1.76)->24(7.05)->26(1.53)->27(9.95)->32(2.76)->33(2.99)->35(7.86)->36(7.13)->40(2.88)->42(9.95)->43(4.33)->44(2.92)->29(5.53)->31(2.46)->39(8.23)->45(5.97)->47(9.89)->48(2.95)->49(8.35)
29->1(5.17)->2(4.72)->3(5.57)->23(7.56)->24(9.51)->26(2.87)->27(9.06)->0(7.18)->4(9.73)->7(7.85)->8(7.16)->12(7.6)->14(7.55)->19(5.21)->21(3.1)->28(5.53)->31(3.39)->33(9.68)->34(7.21)->36(2.95)->37(8.7)->39(6.56)->41(1.77)->42(4.49)->43(8.52)->44(1.41)->38(9.59)->45(8.53)->46(4.7)->47(2.6)->48(1.32)
30->0(3.78)->5(7.47)->6(7.14)->7(6.27)->10(2.63)->13(3.55)->15(7.17)->20(4.2)->21(4.4)->27(4.41)->1(3.87)->2(3.56)->3(5.91)->12(6.21)->19(5.18)->22(5.69)->24(8.23)->26(1.78)->32(8.13)->34(1.24)->39(2.6)->41(3.93)->42(9.13)->44(9.72)->45(9.77)->46(8.66)->31(1.01)->33(8.63)->35(5.21)->36(3.19)->43(5.67)->47(3.11)->48(9.06)->49(6.53)
31->1(9.98)->2(9.74)->4(8.97)->5(2.11)->9(9.67)->10(1.66)->11(9.5)->13(4.62)->14(1.35)->16(3.73)->17(3.6)->19(2.16)->24(5.64)->25(1.78)->27(6.09)->29(3.39)->6(9.94)->7(8.6)->18(2.87)->23(1.1)->26(3.3)->28(2.46)->30(1.01)->34(6.83)->37(2.45)->40(1.29)->45(9.05)->47(5.71)->32(9.28)->33(4.96)->36(4.25)->38(8.67)->43(5.89)
32->1(2.53)->5(2.69)->7(5.81)->9(8.91)->16(7.58)->18(8.27)->19(9.21)->20(1.44)->26(1.78)->28(2.76)->30(8.13)->3(6.79)->12(2.97)->15(8.9)->21(8.89)->31(9.28)->34(8.94)->36(8.88)->37(5.07)->43(8.37)->45(8.11)->47(6.4)->48(5.93)->49(9)->46(4.04)
33->1(4.44)->2(2.59)->4(5.74)->7(5.87)->10(4.57)->12(8.97)->13(9.06)->14(8.03)->20(3.96)->24(2.62)->25(1.88)->26(1.11)->27(2.73)->28(2.99)->29(9.68)->0(8.22)->3(6.34)->5(5.27)->6(4.86)->9(8.85)->15(7.7)->16(1.46)->19(3.88)->30(8.63)->31(4.96)->35(2.65)->38(3.01)->40(9.96)->43(7.65)->48(6.98)->45(7.12)
34->1(7.16)->13(6.51)->19(5.84)->21(1.61)->24(7.95)->25(9.62)->26(5.69)->27(2.99)->29(7.21)->30(1.24)->31(6.83)->32(8.94)->4(7.66)->7(4.84)->9(6.48)->10(7.86)->12(5.6)->14(1.52)->17(5.08)->22(9.46)->36(2.64)->38(3.16)->39(2.22)->40(8.11)->42(6.79)->47(2.34)->35(4.33)->37(4.33)->49(5.51)
35->0(7.1)->2(7.04)->9(8.07)->10(9.31)->13(9.28)->22(2.78)->26(9.05)->27(8.98)->28(7.86)->33(2.65)->4(5.79)->5(2.21)->6(4.37)->7(9.23)->12(5.31)->14(6.86)->16(1.01)->18(8.69)->21(2.69)->25(6.36)->30(5.21)->34(4.33)->38(3.93)->40(2.14)->45(2.36)->46(2.21)->49(2.86)->44(6.79)
36->1(6.87)->3(1.48)->5(6.97)->6(4.49)->7(4.13)->8(8.64)->10(1.92)->12(5.95)->13(9.91)->17(1.39)->19(6.16)->23(7.36)->24(1.65)->25(7.72)->26(4.32)->28(7.13)->29(2.95)->32(8.88)->34(2.64)->2(3.08)->14(3.29)->20(3.63)->22(8.46)->30(3.19)->31(4.25)->37(8.58)->40(4.23)->41(8.84)->42(4.52)->45(9.51)->47(9.36)->38(2.13)
37->0(5.58)->2(6.01)->3(3.08)->15(2.81)->16(8.02)->21(2.98)->22(6.23)->23(6.75)->24(3.1)->25(4.83)->26(1.29)->27(4.43)->29(8.7)->31(2.45)->32(5.07)->36(8.58)->5(1.42)->6(6.16)->9(7.96)->11(4.01)->20(4.23)->34(4.33)->38(6.27)->40(5.93)->43(8.27)->46(2.32)->39(5.3)->48(2.34)
38->3(3.92)->5(2.93)->9(3.36)->11(3.9)->13(2.15)->17(6.02)->18(5.5)->24(9.15)->26(2.76)->27(4.86)->33(3.01)->34(3.16)->35(3.93)->37(6.27)->0(7.58)->4(8.13)->12(5.65)->14(2.06)->16(9.33)->19(8.02)->21(7.15)->29(9.59)->31(8.67)->36(2.13)->39(7.53)->41(5.55)->43(2.7)->47(3.76)->48(6.19)->44(4.02)
39->3(3.13)->4(4.9)->5(1.67)->8(4.19)->9(3.86)->10(6.47)->15(5.4)->18(8.5)->22(6.48)->26(2.38)->29(6.56)->30(2.6)->34(2.22)->38(7.53)->2(6.92)->6(7.68)->17(2.87)->20(9.42)->24(5.19)->25(8.83)->27(2.65)->28(8.23)->37(5.3)->45(3.28)->47(5.18)->48(4.33)->49(1.46)->42(8.33)->44(5.56)
40->3(2.05)->7(4.23)->8(1.5)->13(9.02)->17(1.63)->18(9.99)->20(6.3)->24(3.02)->27(9.18)->28(2.88)->31(1.29)->33(9.96)->34(8.11)->35(2.14)->36(4.23)->37(5.93)->0(5.66)->1(2.8)->2(4.07)->5(4.48)->10(2.54)->11(8.34)->14(4.77)->15(5.71)->16(2.75)->19(4.67)->23(8.77)->26(4.11)->45(7.42)->46(6)->48(5.64)->43(9.35)->49(4.51)
41->1(3.59)->5(2.55)->7(3.83)->8(6.14)->11(3.06)->17(9.54)->19(8.75)->20(5.63)->22(2.67)->25(8.7)->26(1.68)->29(1.77)->30(3.93)->36(8.84)->38(5.55)->3(2.27)->4(3.66)->6(1.55)->9(7.18)->13(8.01)->15(2.66)->16(8.12)->18(5.81)->21(3.86)->23(5.13)->47(7.22)->43(6.89)
42->0(1.49)->5(3.5)->8(7.86)->9(7)->11(4.11)->13(7.23)->15(2.25)->19(9.66)->20(5.28)->22(5.07)->24(6.63)->26(4.86)->28(9.95)->29(4.49)->30(9.13)->34(6.79)->36(4.52)->4(2.38)->6(9.93)->10(6.73)->12(9.46)->14(7.32)->17(1.48)->21(4.03)->23(5.66)->39(8.33)->45(2.1)
43->3(5.19)->5(2.95)->13(9.33)->22(2.18)->23(8.89)->25(6.97)->28(4.33)->29(8.52)->32(8.37)->33(7.65)->37(8.27)->38(2.7)->1(9.74)->7(6.09)->8(1.46)->14(4.42)->15(1.25)->16(1.55)->18(2.66)->24(6.34)->30(5.67)->31(5.89)->40(9.35)->41(6.89)->47(7.37)->48(9.61)->46(4.73)
44->1(4.12)->4(3.7)->7(3.54)->8(3.12)->9(7.47)->10(7.93)->12(7.28)->16(4.63)->18(2.03)->25(8.62)->27(6.04)->28(2.92)->29(1.41)->30(9.72)->3(7.59)->5(4.12)->11(8.21)->17(6.1)->19(2.04)->24(8.38)->35(6.79)->38(4.02)->39(5.56)->45(7.26)->46(1.39)->47(7.67)->48(9.51)
45->6(9.72)->9(2.97)->10(6.64)->12(4.06)->15(4.66)->18(6.82)->19(5.16)->23(9.03)->24(5.22)->30(9.77)->31(9.05)->32(8.11)->35(2.36)->36(9.51)->39(3.28)->40(7.42)->42(2.1)->44(7.26)->1(2.6)->2(9.86)->7(7.87)->8(1.71)->13(1.76)->22(4.57)->28(5.97)->29(8.53)->33(7.12)->46(4.78)->48(8.63)->47(5.9)
46->5(8.29)->7(8.97)->8(7.5)->10(1.3)->12(6.47)->13(5.72)->14(4)->15(4.5)->16(6.42)->18(6.3)->20(6.32)->24(9.38)->25(7.84)->30(8.66)->35(2.21)->37(2.32)->40(6)->44(1.39)->45(4.78)->1(5.33)->2(1.06)->4(9.99)->19(5.5)->22(9.2)->23(5.67)->29(4.7)->32(4.04)->43(4.73)->47(7.47)->49(4.24)
47->0(6.8)->7(6.33)->8(9.57)->9(2.74)->10(9.49)->12(6.64)->13(3.37)->17(1.3)->19(1.96)->21(8.15)->24(2.18)->26(4.3)->27(2.67)->31(5.71)->32(6.4)->34(2.34)->36(9.36)->38(3.76)->39(5.18)->41(7.22)->43(7.37)->44(7.67)->46(7.47)->2(7.44)->4(7.61)->16(1.85)->25(2.83)->28(9.89)->29(2.6)->30(3.11)->45(5.9)->48(3.8)->49(9.53)
48->3(7.79)->4(3.26)->5(6.19)->7(7.96)->10(1.08)->12(6.14)->13(6.85)->14(1.84)->16(1.07)->24(3.84)->25(1.55)->27(3.28)->32(5.93)->33(6.98)->38(6.19)->39(4.33)->40(5.64)->43(9.61)->44(9.51)->45(8.63)->0(8.72)->8(8.16)->15(3.38)->18(3.98)->21(4.3)->23(5.12)->28(2.95)->29(1.32)->30(9.06)->37(2.34)->47(3.8)->49(5.74)
49->1(5.99)->2(2.85)->7(7.12)->9(9.83)->12(9.32)->17(8.79)->20(4.54)->21(2.19)->23(2.85)->25(1.15)->27(2.76)->32(9)->35(2.86)->39(1.46)->48(5.74)->3(5.59)->4(2.17)->10(2.45)->11(5.66)->15(7)->19(2.5)->28(8.35)->30(6.53)->34(5.51)->40(4.51)->46(4.24)->47(9.53)
shortest path length from 0 to 0 is 0
shortest path length from 0 to 1 is 4.34
shortest path length from 0 to 2 is 1.85
shortest path length from 0 to 3 is 3
shortest path length from 0 to 4 is 2.44
shortest path length from 0 to 5 is 4.85
shortest path length from 0 to 6 is 5.57
shortest path length from 0 to 7 is 5.34
shortest path length from 0 to 8 is 2.98
shortest path length from 0 to 9 is 5.46
shortest path length from 0 to 10 is 4.21
shortest path length from 0 to 11 is 5.51
shortest path length from 0 to 12 is 5.27
shortest path length from 0 to 13 is 4.11
shortest path length from 0 to 14 is 4.43
shortest path length from 0 to 15 is 3.75
shortest path length from 0 to 16 is 4.71
shortest path length from 0 to 17 is 2.97
shortest path length from 0 to 18 is 3.96
shortest path length from 0 to 19 is 5.51
shortest path length from 0 to 20 is 5.88
shortest path length from 0 to 21 is 3.71
shortest path length from 0 to 22 is 5.27
shortest path length from 0 to 23 is 4.85
shortest path length from 0 to 24 is 5.41
shortest path length from 0 to 25 is 5.31
shortest path length from 0 to 26 is 5.35
shortest path length from 0 to 27 is 5.79
shortest path length from 0 to 28 is 4.85
shortest path length from 0 to 29 is 5.71
shortest path length from 0 to 30 is 3.78
shortest path length from 0 to 31 is 4.8
shortest path length from 0 to 32 is 6.88
shortest path length from 0 to 33 is 4.45
shortest path length from 0 to 34 is 5.02
shortest path length from 0 to 35 is 5.13
shortest path length from 0 to 36 is 4.36
shortest path length from 0 to 37 is 5.24
shortest path length from 0 to 38 is 6.25
shortest path length from 0 to 39 is 5.84
shortest path length from 0 to 40 is 4.48
shortest path length from 0 to 41 is 5.27
shortest path length from 0 to 42 is 1.49
shortest path length from 0 to 43 is 4.44
shortest path length from 0 to 44 is 4.3
shortest path length from 0 to 45 is 3.6
shortest path length from 0 to 46 is 2.91
shortest path length from 0 to 47 is 4.27
shortest path length from 0 to 48 is 5.29
shortest path length from 0 to 49 is 4.61
The shortest path between vertex 0 and vertex 0 is : 0 
The shortest path between vertex 0 and vertex 1 is : 0 42 17 1 
The shortest path between vertex 0 and vertex 2 is : 0 2 
The shortest path between vertex 0 and vertex 3 is : 0 2 3 
The shortest path between vertex 0 and vertex 4 is : 0 4 
The shortest path between vertex 0 and vertex 5 is : 0 2 5 
The shortest path between vertex 0 and vertex 6 is : 0 42 17 6 
The shortest path between vertex 0 and vertex 7 is : 0 2 8 7 
The shortest path between vertex 0 and vertex 8 is : 0 2 8 
The shortest path between vertex 0 and vertex 9 is : 0 2 46 10 9 
The shortest path between vertex 0 and vertex 10 is : 0 2 46 10 
The shortest path between vertex 0 and vertex 11 is : 0 2 8 11 
The shortest path between vertex 0 and vertex 12 is : 0 2 46 10 12 
The shortest path between vertex 0 and vertex 13 is : 0 2 13 
The shortest path between vertex 0 and vertex 14 is : 0 2 3 14 
The shortest path between vertex 0 and vertex 15 is : 0 42 15 
The shortest path between vertex 0 and vertex 16 is : 0 2 16 
The shortest path between vertex 0 and vertex 17 is : 0 42 17 
The shortest path between vertex 0 and vertex 18 is : 0 18 
The shortest path between vertex 0 and vertex 19 is : 0 2 8 19 
The shortest path between vertex 0 and vertex 20 is : 0 2 8 20 
The shortest path between vertex 0 and vertex 21 is : 0 2 21 
The shortest path between vertex 0 and vertex 22 is : 0 2 22 
The shortest path between vertex 0 and vertex 23 is : 0 2 21 23 
The shortest path between vertex 0 and vertex 24 is : 0 2 13 24 
The shortest path between vertex 0 and vertex 25 is : 0 2 46 10 25 
The shortest path between vertex 0 and vertex 26 is : 0 42 17 1 26 
The shortest path between vertex 0 and vertex 27 is : 0 4 27 
The shortest path between vertex 0 and vertex 28 is : 0 4 28 
The shortest path between vertex 0 and vertex 29 is : 0 2 46 44 29 
The shortest path between vertex 0 and vertex 30 is : 0 30 
The shortest path between vertex 0 and vertex 31 is : 0 30 31 
The shortest path between vertex 0 and vertex 32 is : 0 42 17 1 32 
The shortest path between vertex 0 and vertex 33 is : 0 2 33 
The shortest path between vertex 0 and vertex 34 is : 0 30 34 
The shortest path between vertex 0 and vertex 35 is : 0 2 46 35 
The shortest path between vertex 0 and vertex 36 is : 0 42 17 36 
The shortest path between vertex 0 and vertex 37 is : 0 2 46 37 
The shortest path between vertex 0 and vertex 38 is : 0 2 13 38 
The shortest path between vertex 0 and vertex 39 is : 0 42 17 39 
The shortest path between vertex 0 and vertex 40 is : 0 2 8 40 
The shortest path between vertex 0 and vertex 41 is : 0 2 3 41 
The shortest path between vertex 0 and vertex 42 is : 0 42 
The shortest path between vertex 0 and vertex 43 is : 0 2 8 43 
The shortest path between vertex 0 and vertex 44 is : 0 2 46 44 
The shortest path between vertex 0 and vertex 45 is : 0 42 45 
The shortest path between vertex 0 and vertex 46 is : 0 2 46 
The shortest path between vertex 0 and vertex 47 is : 0 42 17 47 
The shortest path between vertex 0 and vertex 48 is : 0 2 46 10 48 
The shortest path between vertex 0 and vertex 49 is : 0 4 49 
The average path length for the graph of edge density 40% is 4.
*/

/*While doing this assignment, I learnt about a large number of things. The most important of which was the 
implementation of graph as an abstract data-type. There were two options to do the same. One was 
adjacency matrix and the other was adjacency list. In case of the assignment, i chose adjacency list method 
because the edge density was quite low. I implemented this using vector of vectors. I took help of the 
already available feature of c++, priority_queue to make the class PriorityQueue. And finally it all 
came to place in the class shortestPath. In my code, a random graph can be generated with a given number of 
vertices and any variable edge density or distance range. From the output it can be verified that when the 
density was doubled, the number of edges also some-what doubled. Another important outcome of this assignment was the increase of familiarity with the use 
of c++ stl and object oriented programming. While implementing various classes, I came across many restrictions 
which are their regarding the use of vectors inside a class, and also regarding declarations of member functions.
The implementation of Dijkstra's algorithm was explained in the lecture. And with the help of the guidelines 
for the assignment, it was completed using required classes. */
